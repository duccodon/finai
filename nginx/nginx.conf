worker_processes auto;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # --- Logging ---
  log_format json escape=json
    '{ "time":"$time_iso8601","ip":"$remote_addr","method":"$request_method",'
    '"uri":"$request_uri","status":$status,"ua":"$http_user_agent",'
    '"upstream":"$upstream_addr","rt":$request_time }';
  access_log /dev/stdout json;
  error_log  /dev/stderr warn;


  # --- Rate limit  ---
  limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
  limit_req_status 429;    
  limit_req_log_level notice; 

  # --- Microcache ---
  proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=micro:10m inactive=60s max_size=100m;

  # --- Upstreams ---
  upstream auth_svc     { server auth:4000;     keepalive 16; }
  upstream backtest_svc { server backtest:5000; keepalive 16; }
  upstream financial_news_svc { server financial-news-service:5003; keepalive 16; }
  upstream user_svc     { server auth:4000;     keepalive 16; }
  upstream predict_svc  { server predict:9000;  keepalive 16; }

  # --- Map Upgrade cho WebSocket ---
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # --- Map Origin cho CORS ---
  map $http_origin $cors_allowed_origin {
    default "";
    "~^https?://(localhost|127\.0\.0\.1)(:\d+)?$" $http_origin;
  }

  server {
    listen 80;
    server_name _;

    # --- Auth service (không cần WS, không cache) ---
    location /api/auth/ {
      # --- CORS cho mọi response ---
      add_header Access-Control-Allow-Origin $cors_allowed_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
      add_header Vary Origin always;

      # --- BẮT OPTIONS SỚM, KHÔNG ĐẨY LÊN UPSTREAM ---
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allowed_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        add_header Access-Control-Max-Age 3600;
        add_header Content-Length 0;
        add_header Content-Type "text/plain; charset=UTF-8";
        return 204;
      }

      proxy_pass http://auth_svc;  # phần còn lại giữ nguyên
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }


    # --- User service ---
    location /api/user/ {
      # CORS
      add_header Access-Control-Allow-Origin $cors_allowed_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
      add_header Vary Origin always;

      # OPTIONS trước, return 204
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allowed_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        add_header Access-Control-Max-Age 3600;
        add_header Content-Length 0;
        add_header Content-Type "text/plain; charset=UTF-8";
        return 204;
      }

      # --- Auth verify ---
      auth_request /auth;
      auth_request_set $user_id $upstream_http_x_user_id;
      proxy_set_header X-User-Id $user_id;

      # --- Rate limit & microcache cho GET ---
      limit_req zone=api_limit burst=20 nodelay;
      proxy_cache micro;
      proxy_cache_methods GET HEAD;
      proxy_cache_valid 200 2s;
      proxy_no_cache $http_authorization;

      proxy_pass http://user_svc;
      proxy_http_version 1.1;

      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # --- Timeout & upload ---
      client_max_body_size 20m;
      proxy_connect_timeout 5s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
    }

    # --- Predict service ---
    location /api/predict/ {
      # CORS
      add_header Access-Control-Allow-Origin $cors_allowed_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
      add_header Vary Origin always;

      # OPTIONS trước, return 204
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allowed_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        add_header Access-Control-Max-Age 3600;
        add_header Content-Length 0;
        add_header Content-Type "text/plain; charset=UTF-8";
        return 204;
      }

      # --- Auth verify ---
      auth_request /auth;
      auth_request_set $user_id $upstream_http_x_user_id;
      proxy_set_header X-User-Id $user_id;

      # --- Rate limit & microcache cho GET ---
      limit_req zone=api_limit burst=20 nodelay;
      proxy_cache micro;
      proxy_cache_methods GET HEAD;
      proxy_cache_valid 200 2s;
      proxy_no_cache $http_authorization;

      proxy_pass http://predict_svc;
      proxy_http_version 1.1;

      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # --- Timeout & upload ---
      client_max_body_size 20m;
      proxy_connect_timeout 5s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
    }

    # --- Backtest service ---
    location /api/backtest/ {
      # CORS
      add_header Access-Control-Allow-Origin $cors_allowed_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
      add_header Vary Origin always;

      # OPTIONS trước, return 204
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allowed_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        add_header Access-Control-Max-Age 3600;
        add_header Content-Length 0;
        add_header Content-Type "text/plain; charset=UTF-8";
        return 204;
      }

      # --- Auth verify ---
      auth_request /auth;
      auth_request_set $user_id $upstream_http_x_user_id;
      proxy_set_header X-User-Id $user_id;

      # --- Rate limit & microcache cho GET ---
      limit_req zone=api_limit burst=20 nodelay;
      proxy_cache micro;
      proxy_cache_methods GET HEAD;
      proxy_cache_valid 200 2s;
      proxy_no_cache $http_authorization;

      proxy_pass http://backtest_svc;
      proxy_http_version 1.1;

      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # --- Timeout & upload ---
      client_max_body_size 20m;
      proxy_connect_timeout 5s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
    }

    # --- Financial News Service ---
    location /api/v1/news/ {
      # CORS
      add_header Access-Control-Allow-Origin $cors_allowed_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
      add_header Vary Origin always;

      # OPTIONS trước, return 204
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allowed_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        add_header Access-Control-Max-Age 3600;
        add_header Content-Length 0;
        add_header Content-Type "text/plain; charset=UTF-8";
        return 204;
      }

      # --- Auth verify ---
      auth_request /auth;
      auth_request_set $user_id $upstream_http_x_user_id;
      proxy_set_header X-User-Id $user_id;

      # --- Rate limit & microcache cho GET ---
      limit_req zone=api_limit burst=20 nodelay;
      proxy_cache micro;
      proxy_cache_methods GET HEAD;
      proxy_cache_valid 200 2s;
      proxy_no_cache $http_authorization;

      proxy_pass http://financial_news_svc;
      proxy_http_version 1.1;

      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # --- Timeout & upload ---
      client_max_body_size 200m;
      proxy_connect_timeout 100s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
    }

    # --- Subrequest để verify JWT qua Auth service ---
    location = /auth {
      internal;
      proxy_pass http://auth_svc/api/auth/v1/verify;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
      proxy_set_header Authorization $http_authorization;
      proxy_set_header Cookie $http_cookie;
      proxy_set_header X-Original-URI $request_uri;
    }



    # --- JSON error khi auth fail ---
    error_page 401 403 = @unauthorized;
    location @unauthorized {
      add_header Content-Type application/json;
      return 401 '{"message":"Unauthorized"}';
    }
  }
}
